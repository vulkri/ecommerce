services:
  backend:
    container_name: "ecommerce-backend"
    user: $HOST_UID:$HOST_GID
    build:
      context: .
      dockerfile: deployment/Dockerfile
      args:
        UID: $HOST_UID
        GID: $HOST_GID
        APP_NAME: "ecommerce-demo"
        APP_HOST: 0.0.0.0
        APP_PORT: 8000

    volumes:
      - ./backend:/home/nonroot/app
      - ./deployment/scripts:/home/nonroot/deployment/scripts
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db
    command: [ "/bin/sh", "/home/nonroot/deployment/scripts/backend/start.sh" ]

  db:
    image: postgres
    container_name: ${POSTGRES_HOST}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: "${POSTGRES_PASS}"
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - pgdata:/var/lib/posgresql/data

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - db

  redis:
    container_name: "ecommerce-redis"
    image: redis:latest

  celery-worker: &celery-worker
    container_name: "ecommerce-celery-worker"
    user: $HOST_UID:$HOST_GID
    build:
      context: .
      dockerfile: deployment/Dockerfile
      args:
        UID: $HOST_UID
        GID: $HOST_GID
    volumes:
      - ./backend:/home/nonroot/app
      - ./deployment/scripts:/home/nonroot/deployment/scripts
    depends_on:
      - redis
      - backend
      - db
    command: [ "/bin/sh", "/home/nonroot/deployment/scripts/celery/start-worker.sh" ]

  celery-beat:
    <<: *celery-worker
    container_name: "ecommerce-celery-beat"
    command: [ "/bin/sh", "/home/nonroot/deployment/scripts/celery/start-beat.sh" ]

volumes:
  pgdata:
  pgadmin: